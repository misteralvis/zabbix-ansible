---
- name: Check if required variables are defined and not empty
  assert:
    that:
      - vars[item] is defined
      - (vars[item] | default('')) != ''
    fail_msg: "Required variable '{{ item }}' is not defined or is empty"
    msg:
    - "All required variables are defined and not empty:"
  loop: "{{ required_variables }}"

- name: Print variables for debugging purposes
  ansible.builtin.debug:
    msg:
    - "Hostname: '{{ Hostname }}'"
    - "Agent_ConfFile: '{{ Agent_ConfFile }}'"
    - "Agent_ConfFileBackup: '{{ Agent_ConfFileBackup }}'"
    - "Agent_Server: '{{ Agent_Server }}'"
    - "Agent_ServerActive: '{{ Agent_ServerActive }}'"
    - "Agent_LogFile: '{{ Agent_LogFile }}'"
    - "Agent_LogFileSize: '{{ Agent_LogFileSize }}'"
    - "Agent_TLSPSKIdentity: '{{ Agent_TLSPSKIdentity }}'"
    - "Agent_TLSPSKFile: '{{ Agent_TLSPSKFile }}'"

#---
#--- Start Agent configuration section
#---
- name: Set RHEL major vers based on OS distribution/version
  set_fact:
    os_major_vers: "{{ '7' if (ansible_distribution == 'Amazon' and ansible_distribution_major_version == '2') else '9' if (ansible_distribution == 'Amazon' and ansible_distribution_major_version == '2023') else ansible_distribution_major_version }}"

- debug:
    var: os_major_vers

- name: Install Zabbix repository RPM
  yum:
    name: "https://repo.zabbix.com/zabbix/6.0/rhel/{{ os_major_vers }}/x86_64/zabbix-release-6.0-4.el{{ os_major_vers }}.noarch.rpm"
    disable_gpg_check: True
    state: present

- name: Install required packages
  package:
    name: 
      - zabbix-agent2
      - fping
    state: present
  notify: "restart zabbix-agent"

- name: Check Backup /etc/zabbix/zabbix_agent2.conf already present
  stat:
    path: "{{ Agent_ConfFileBackup }}"
  register: zabbix_agent2_conf_backup_stat

- name: Backup /etc/zabbix/zabbix_agent2.conf
  copy: 
    src: "{{ Agent_ConfFile }}"
    dest: "{{ Agent_ConfFileBackup }}"
  when: zabbix_agent2_conf_backup_stat.stat.exists == False

- name: Set Server in Zabbix agent2 config
  lineinfile:
    path: "{{ Agent_ConfFile }}"
    regexp: '^Server='
    line: 'Server={{ Agent_Server }}'
  notify: "restart zabbix-agent"

- name: Set ServerActive in Zabbix agent2 config
  lineinfile:
    path: "{{ Agent_ConfFile }}"
    regexp: '^ServerActive='
    line: 'ServerActive={{ Agent_ServerActive }}'
  notify: "restart zabbix-agent"

- name: Set Hostname in Zabbix agent2 config
  lineinfile:
    path: "{{ Agent_ConfFile }}"
    regexp: '^Hostname='
    line: 'Hostname={{ Hostname }}'
  notify: "restart zabbix-agent"

- name: Set LogFile in Zabbix agent2 config
  lineinfile:
    path: "{{ Agent_ConfFile }}"
    regexp: '^LogFile='
    line: 'LogFile={{ Agent_LogFile }}'
  notify: "restart zabbix-agent"

- name: Set LogFileSize in Zabbix agent2 config
  lineinfile:
    path: "{{ Agent_ConfFile }}"
    regexp: '^LogFileSize='
    line: 'LogFileSize={{ Agent_LogFileSize }}'
  notify: "restart zabbix-agent"

- name: Set TLSConnect in Zabbix agent2 config
  lineinfile:
    path: "{{ Agent_ConfFile }}"
    insertafter: '^# TLSConnect='
    regexp: '^TLSConnect='
    line: 'TLSConnect={{Agent_TLSConnect }}'
  notify: "restart zabbix-agent"

- name: Set TLSAccept in Zabbix agent2 config
  lineinfile:
    path: "{{ Agent_ConfFile }}"
    insertafter: '^# TLSAccept='
    regexp: '^TLSAccept='
    line: 'TLSAccept={{ Agent_TLSAccept }}'
  notify: "restart zabbix-agent"

- name: Set TLSPSKIdentity in Zabbix agent2 config
  lineinfile:
    path: "{{ Agent_ConfFile }}"
    insertafter: '^# TLSPSKIdentity='
    regexp: '^TLSPSKIdentity='
    line: 'TLSPSKIdentity={{ Agent_TLSPSKIdentity }}'
  notify: "restart zabbix-agent"

- name: Set TLSPSKFile in Zabbix agent config
  lineinfile:
    path: "{{ Agent_ConfFile }}"
    insertafter: '^# TLSPSKFile='
    regexp: '^TLSPSKFile='
    line: 'TLSPSKFile={{ Agent_TLSPSKFile }}'
  notify: "restart zabbix-agent"

- name: Copy zabbix-agent2.psk to local 
  copy:
    src: "zabbix-agent2.psk"
    dest: "{{ Agent_TLSPSKFile }}"
    owner: zabbix
    group: zabbix
    mode: 0640
  notify: "restart zabbix-agent"

- name: Add logrotate configuration for zabbix_agent2.log
  blockinfile:
    path: /etc/logrotate.d/zabbix-agent2
    backup: true
    create: true
    block: |
      {{ Agent_LogFile }} {
          daily
          rotate 14
          compress
          delaycompress
          missingok
          notifempty
          create 0664 zabbix zabbix
      }
    marker: "# {mark} Managed by Ansible"
    marker_begin: "# {mark} ANSIBLE MANAGED BLOCK BEGIN"
    marker_end: "# {mark} ANSIBLE MANAGED BLOCK END"
    insertafter: BOF
